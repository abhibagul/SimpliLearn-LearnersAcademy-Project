/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.23
 * Generated at: 2023-01-11 09:03:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.manageClasses;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;

public final class modifyClass_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Modify Class</title>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css\">\r\n");
      out.write("\r\n");
      out.write("<link href=\"../dashboard.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body class=\"bg-light\">\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	");

		String session_u_name = (String)session.getAttribute("usname");
		String role = (String)session.getAttribute("role");	
	
		if(role != "admin"){
			response.sendRedirect(request.getContextPath() + "/admin.jsp");
		}
		
		
		if(request.getParameter("classId") == null){
			response.sendRedirect(request.getContextPath() + "/manageClasses.jsp");
		}
		
		String driverName = "com.mysql.jdbc.Driver";
		String connectionUrl = "jdbc:mysql://localhost:3306/";
		String dbName = "learnersacademy";
		String userId = "root";
		String password = "root12345";
		
		String action = (String)request.getParameter("action");
		
		

		
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("<main>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../sidebarComp.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"data\">\r\n");
      out.write("	\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../headerComp.jsp", out, false);
      out.write("\r\n");
      out.write("  \r\n");
      out.write("	\r\n");
      out.write("	<div class=\"p-3 control\">\r\n");
      out.write("\r\n");
      out.write("	<h3> Modify Standard &amp; Division</h3>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	");

	
	String className = "";
	String stdName = "";
	String divName = "";

	if(request.getParameter("action") != null && action.equals("updation")){
		
		if(request.getParameter("status") != null && request.getParameter("status").equals("1")){
			
      out.write("\r\n");
      out.write("			<div class=\"alert alert-success\" role=\"alert\">\r\n");
      out.write("			 Class updated successfully!\r\n");
      out.write("			</div>	\r\n");
      out.write("			");

		}else if(request.getParameter("status") != null && request.getParameter("status").equals("0")){
			
      out.write("\r\n");
      out.write("			<div class=\"alert alert-danger\" role=\"alert\">\r\n");
      out.write("			 Unable to update the class, Try again!\r\n");
      out.write("			</div>	\r\n");
      out.write("			");

		}
		
	}
	
	//fetch existing data
	try {
		Class.forName(driverName);
	} catch (ClassNotFoundException e) {
		e.printStackTrace();
	}

	Connection connection = null;
	Statement statement = null;
	ResultSet resultSet = null;

	try{
		
		connection = DriverManager.getConnection(connectionUrl+dbName, userId, password);
		statement=connection.createStatement();
	
		
		PreparedStatement fetchPs = connection.prepareStatement("SELECT * FROM class where id=?");
		fetchPs.setString(1, request.getParameter("classId"));
		resultSet = fetchPs.executeQuery();
		
		while(resultSet.next()){
			className = resultSet.getString("name");
			stdName = resultSet.getString("std");
			divName = resultSet.getString("class");
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}

	
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"my-3 p-3 bg-body rounded shadow-sm\">\r\n");
      out.write("	\r\n");
      out.write("		<form method=\"post\" action=\"");
      out.print( request.getContextPath() );
      out.write("/modifyClass\">\r\n");
      out.write("		\r\n");
      out.write("		<input type=\"hidden\" name=\"action\" value=\"modifyClass\">\r\n");
      out.write("		<input type=\"hidden\" name=\"id\" value=\"");
      out.print( request.getParameter("classId") );
      out.write("\"/>\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<div class=\" g-3 mb-3 align-items-center\">\r\n");
      out.write("		  <div class=\"col-5\">\r\n");
      out.write("		    <label for=\"className\" class=\"col-form-label\">Class Name</label>\r\n");
      out.write("		  </div>\r\n");
      out.write("		  <div class=\"col-auto\">\r\n");
      out.write("		    <input type=\"text\" id=\"className\" name=\"className\" value=\"");
      out.print( className );
      out.write("\" required class=\"form-control\" aria-describedby=\"className\">\r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<div class=\" g-3 mb-3 align-items-center\">\r\n");
      out.write("		  <div class=\"col-5\">\r\n");
      out.write("		    <label for=\"stdName\" class=\"col-form-label\">Standard Name</label>\r\n");
      out.write("		  </div>\r\n");
      out.write("		  <div class=\"col-auto\">\r\n");
      out.write("		    <input type=\"text\" id=\"stdName\" name=\"stdName\" value=\"");
      out.print( stdName );
      out.write("\" required class=\"form-control\" aria-describedby=\"stdName\">\r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		<div class=\" g-3 mb-3 align-items-center\">\r\n");
      out.write("		  <div class=\"col-5\">\r\n");
      out.write("		    <label for=\"divName\" class=\"col-form-label\">Division Name</label>\r\n");
      out.write("		  </div>\r\n");
      out.write("		  <div class=\"col-auto\">\r\n");
      out.write("		    <input type=\"text\" id=\"divName\" name=\"divName\" value=\"");
      out.print( divName );
      out.write("\" required class=\"form-control\" aria-describedby=\"divName\">\r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		<input class=\"btn btn-primary\" type=\"submit\" value=\"Update\">\r\n");
      out.write("		<input class=\"btn btn-light\" type=\"reset\" value=\"Reset\">\r\n");
      out.write("		\r\n");
      out.write("		</form>\r\n");
      out.write("\r\n");
      out.write("	</div><!-- white card -->\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	<!-- /main content -->\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	</main>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
